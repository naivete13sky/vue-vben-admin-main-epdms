<!--    使用 v-model 的原生事件： 尝试使用@update:modelValue事件替代@input事件。有时候，Vue 3的模板会更喜欢使用@update:modelValue。-->
<input v-model.trim="searchKeyword" @update:modelValue="handleInput" placeholder="料号ID、料号名称" @keydown.enter="handleSearch" />
<a-button type="primary" @click="handleSearch">搜索</a-button>

async function handleSearch() {
  try {

    // console.log("Search Keyword:", searchKeyword.value); // 添加这行进行调试

    // 在这里你可以调用后端接口进行搜索
    const result = await getBasicDataByKeyword(searchKeyword.value, currentPage.value, pageSize);
    datacc.value = result.arr;
    record_count.value = result.record_count;
    totalPages.value = Math.ceil(record_count.value / pageSize);
  } catch (error) {
    console.error('Error handling search:', error);
    // 处理错误，例如返回默认值或抛出自定义错误
  }
};




<select v-model="selectedOption" style="width: 100px;">
  <option v-for="option in options" :key="option.value" :value="option.value" :label="option.label">
    {{ option.label }}
  </option>
</select>

const result_options = await getBasicDataOptions();
data_options.vlaue = result_options.data; // 更新数据
// console.log("data_options:", data_options.vlaue);
// alert(data_options.vlaue.actions.POST.file_type.choices);
data_options_file_type.value = data_options.vlaue.actions.POST.file_type.choices
// console.log("data_options_file_type:", data_options_file_type.value);

// 将选项添加到 this.options
// console.log("data_options_file_type2:", data_options_file_type.value);
for (const key in data_options_file_type.value) {
  if (data_options_file_type.value.hasOwnProperty(key)) {
    const option = data_options_file_type.value[key];
    options.value.push({ label: option.display_name, value: option.value });
  }
}





在 Vue 3 中，setup 函数内部确实可以使用 this 来访问响应式变量，但是这与 Vue 2 的行为不同。在 Vue 3 的 setup 函数内部，this 并不指向组件实例，而是一个代表当前组件的普通 JavaScript 对象。
在你的代码中，currentPage 是通过 ref 创建的响应式变量，而在 Vue 3 中，访问响应式变量的值需要使用 .value。然而，Vue 3 也允许在 setup 内部使用 this 来访问响应式变量的值，但这是一种行为的例外情况。
所以，虽然在 Vue 3 中 this.currentPage 是合法的，但为了代码的一致性和清晰性，最好还是使用 currentPage.value 来访问和修改响应式变量的值。这样可以确保你的代码在不同情况下都能正常工作，并且更容易理解。




